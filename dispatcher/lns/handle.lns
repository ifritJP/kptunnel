_lune_control default_async_all;


import lns.Types;
import go/github:com.ifritJP.LuneScript.src.lune.base.front as LnsFront;
import go/github:com.ifritJP.LuneScript.src.lune.base.Option as LnsOpt;
import go/github:com.ifritJP.LuneScript.src.lune.base.Util as LnsUtil;
import go/github:com.ifritJP.LuneScript.src.lune.base.Log as lnsLog;

//lnsLog.setLevel( .Info );

class UserAsyncHandlerWrapper extend (Types.AsyncHandleIF) {
   let obj:Luaval<stem>;
   pub fn __init( obj:Luaval<stem> ) {
      self.obj = obj;
   }
   
   pub fn canAccept( uri:str, headerMap:&Map<str,&List<str>> ) __async mut : int, str {
      let mut statusCode = 500;
      let mut mess = "internal error";
      __luaDepend {
         if! let func = self.obj.canAccept {
            if! let work1, work2 = (func@@form)( self.obj, uri, headerMap ) {
               statusCode = work1@@int;
               mess = work2@@str;
            }
         }
      }
      return statusCode, mess;
   }
}



class UserHandlerWrapper extend (Types.HandleIF) {
   let obj:Luaval<stem>;
   let reqTunnelInfoMap:Map<&Types.ReqTunnelInfo,Luaval<stem>>;
   pub fn __init( obj:Luaval<stem> ) {
      self.obj = obj;
      self.reqTunnelInfoMap = {};
   }
   
   pub fn getTunnelInfo(
      uri:str, headerMap:&Map<str,&List<str>> ) __noasync mut : &Types.ReqTunnelInfo!, str
   {
      let mut luaval:Luaval<stem>! = nil;
      let mut lua_mess:stem! = "";
      let mut val:stem! = nil;
      __luago {
         if! let func = self.obj.getTunnelInfo {
            let mut work, mess = (func@@form)( self.obj, uri, headerMap );
            luaval = work;
            lua_mess = expandLuavalMap( mess );
            val = expandLuavalMap( luaval );
         }
      }
      when! val {
         let info, mess = Types.ReqTunnelInfo._fromStem( val );
         when! info, luaval {
            self.reqTunnelInfoMap[ info ] = luaval;
            return info, "";
         }
         error( "failed to fromStem -- %s" ( mess) );
      }
      when! lua_mess {
         return nil, lua_mess@@str;
      }
      return nil, "failed to getTunnelInfo";
   }
   pub fn onEndTunnel( tunnelInfo:&Types.ReqTunnelInfo ) __noasync mut {
      __luago {
         if! let func = self.obj.onEndTunnel {
            (func@@form)( self.obj, self.reqTunnelInfoMap[ tunnelInfo ] );
         }
      }
   }
}

class DefaultHandler extend (Types.HandleIF ) {
   let mut id:int;
   local fn __init() {
      self.id = 10000;
   }

   pub fn getTunnelInfo(
      uri:str, headerMap:&Map<str,&List<str>> ) __noasync mut : &Types.ReqTunnelInfo!, str
   {
      // return new ReqTunnelInfo( 400, "hoge error", "", 0, "", [] );

      self.id = self.id + 1;
      
      print( __func__, "url", uri );
      foreach valList, key in headerMap {
         foreach val in valList {
            print( __func__, "header", "%s: %s" ( key, val ) );
         }
      }

      // let connectMode = Types.ConnectMode.CanReconnect;

      // let mode = "server";
      // return new Types.ReqTunnelInfo(
      //    "localhost", self.id, connectMode, mode,
      //    [ "../kptunnel", mode, ":%d" (self.id),
      //      ":%d,192.168.0.101:22" (10000 + self.id) ],
      //    { "GOGC":"50" } ), "";

      let connectMode = Types.ConnectMode.Client;

      let mode = "wsclient";
      return new Types.ReqTunnelInfo(
         "%d" (self.id),
         "localhost", self.id, connectMode, mode,
         [ "../kptunnel", mode, ":10000", "-omit", "-intlog", "-int", "5" ],
         { "GOGC":"50" } ), "";
   }
   pub fn onEndTunnel( tunnelInfo:&Types.ReqTunnelInfo ) __noasync mut {
      print( __func__, tunnelInfo.$host, tunnelInfo.$port );
   }
}

let mut handler:Types.HandleIF = new DefaultHandler();

class Runtime {
   let path:str;
   let front:LnsFront.Front;
   let luaCode:str;
   pub fn __init( front:LnsFront.Front, path:str, luaCode:str ) {
      self.path = path;
      self.front = front;
      self.luaCode = luaCode;
   }

   local static fn createDummy() __noasync : Runtime {
      let path = "dummy";
      let option = LnsOpt.analyze( [ path, "exe" ] );
      return new Runtime( new LnsFront.Front( option ## ), path, "" );
   }

   local static fn convScript( path:str ) mut : Runtime! {
      let! mut fileObj = io.open( path## ) {
         print( "failed to open -- %s" ( path ) );
         return nil;
      };
      let! lnsCode = fileObj.read( "*a" ) {
         print( "failed to read -- %s" ( path ) );
         return nil;
      };
      
      let mut front;
      __asyncLock {
         let option = LnsOpt.analyze( [ path, "exe" ] );
         front = new LnsFront.Front( option ## );
      }
      let luaCode = front.convertLnsCode2LuaCodeWithOpt( lnsCode, path## );
      return new Runtime( front, path, luaCode );
   }

   local fn loadScript( funcName:str ) : Luaval<form>! {
      // import しているファイルがロードできるように設定する
      self.front.setupPreloadWithImportedModules( true );

      let mut func:Luaval<form>! = nil;
      __luaDepend {
         let loaded, mess = _load( self.luaCode## );
         when! loaded {
            if! let mut mod = loaded(##) {
               if! let work = mod[ funcName ] {
                  func = work@@form;
               } else {
                  print( "not found func -- ", funcName );
               }
            } else {
               print( "failed to exec the load module -- ", self.path );
            }
         } else {
            print( "failed to load -- ", self.path, mess );
         }
      }
      return func;
   }
}

let mut canAcceptRuntime:&Runtime = Runtime.createDummy();



pub fn setupHandle( path:str ) : bool {
   let list = LnsUtil.splitStr( path, "[^,]+");
   if #list ~= 2 {
      print( "illegal param -- %s" (path) );
      return false;
   }
   let handlePath = list[ 1 ];
   let canAccessPath = list[ 2 ];

   if! let runtime = Runtime.convScript( canAccessPath ) {
      if! let func = runtime.loadScript( "createHandler" ) {
         __luaDepend {
            func(##);
         }
      } else {
         return false;
      }
      __asyncLock {
         canAcceptRuntime = runtime;
      }
   } else {
      return false;
   }

   let mut result = false;
   __asyncLock {
      if! let handlerRuntime = Runtime.convScript( handlePath ) {
         if! let func = handlerRuntime.loadScript( "createHandler" ) {
            __luago {
               if! let mut obj = func(##) {
                  handler = new UserHandlerWrapper( obj );
                  result = true;
               } else {
                  print( "illegal return value -- ", handlePath );
               }
            }
         }
      }
   }
   return result;
}

pub fn canAccept( uri:str, headerMap:&Map<str,&List<str>> ) : int, str
{
   let mut asyncHandler:UserAsyncHandlerWrapper! = nil;

   // canAccept は非同期で行なうので、毎回 loadScript する必要がある。
   // 毎回 loadScript しないと、スレッドが違って動かない。
   if! let func = canAcceptRuntime.loadScript( "createHandler" ) {
      __luaDepend {
         if! let mut obj = func(##) {
            asyncHandler = new UserAsyncHandlerWrapper( obj );
         } else {
            print( "illegal return value -- " );
         }
      }
   }
   when! asyncHandler {
      return asyncHandler.canAccept( uri, headerMap )**;
   }
   return 200, "";
}

pub fn getTunnelInfo(
   uri:str, headerMap:&Map<str,&List<str>> ) : &Types.ReqTunnelInfo!, str
{
   let info, mess;
   __asyncLock {
      info, mess = handler.getTunnelInfo( uri, headerMap );
   }
   return info, mess;
}


pub fn onEndTunnel( tunnelInfo:&Types.ReqTunnelInfo ) {
   __asyncLock {
      handler.onEndTunnel( tunnelInfo );
   }
}
